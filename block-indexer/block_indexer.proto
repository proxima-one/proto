syntax = "proto3";

package block_indexer;

message Block {
  string id = 1;
  BlockHeader header = 2;
  repeated Transaction transactions = 3;
}

message BlockHeader {
  int32 number = 1;
  uint32 timestamp = 2;
  string hash = 3;
  string parent_hash = 4;
  string receipts_root = 5;
  string transactions_root = 6;
  string miner = 7;
  uint64 gas_used = 8;
  uint64 gas_limit = 9;
  string difficulty = 10;
  string extra_data = 11;
  string nonce = 12;
  string sha3_uncles = 13;
  string mix_hash = 14;
  string state_root = 15;
  string total_difficulty = 16;
  uint32 size = 17;
}

message Transaction {
  TransactionData data = 1;
  TransactionReceipt receipt = 2;
}

message TransactionData {
  string from = 1;
  string to = 2;
  string hash = 3;
  string value = 4;
  string gas = 5;
  string gas_price = 6;
  string input = 7;
}

message TransactionReceipt {
  uint32 cumulative_gas_used = 1;
  uint32 gas_used = 2;
  bool status = 3;
  repeated Event events = 4;
}

message Event {
  int32 index = 1;
  EventPayload payload = 2;
}

message EventPayload {
  string address = 1;
  string data = 2;
  repeated string topics = 3;
}

message Filter {
  string id = 1;
  FilterParams params = 2;
}

message FilterParams {
  repeated string addresses = 2;
}

message BlockResponse {
  string error = 1;
  Block result = 2;
}

message FindBlocksRequest {
  repeated string ids = 1;
  optional string blockchain_id = 2;
  optional string apply_filter_id = 3;
  optional FilterParams filter = 4;
}

message FindBlocksResponse {
  repeated Block result = 2;
}

message CreateFilterRequest {
  Filter new_filter = 1;
}

message FindFilterRequest {
  string id = 1;
}

message ExtendFilterRequest {
  string id = 1;
  repeated string addresses = 3;
}

message CreateFilterResponse {
  string error = 1;
  Filter result = 2;
}

message FindFilterResponse {
  Filter result = 2;
}

message ExtendFilterResponse {
  Filter result = 2;
}

message RemoveFilterRequest {
  string id = 1;
}

message RemoveFilterResponse {
  string message = 1;
}

message GetHeadersStreamRequest {
  int64 from_seq_id = 1;
  optional string blockchain_id = 3;
}

message GetHeadersStreamResponse {
  // seq_id increments by 1 for each new message in the stream, so that the client can request the next message by incrementing the seq_id
  int64 seq_id = 1;
  BlockHeader header = 2;
  bool undo = 3;
}

service ApiService {
  rpc FindBlocks(FindBlocksRequest) returns (FindBlocksResponse) {};
  rpc GetHeadersStream(GetHeadersStreamRequest) returns (stream GetHeadersStreamResponse) {};
  rpc FindFilter(FindFilterRequest) returns (FindFilterResponse) {};
  rpc CreateFilter(CreateFilterRequest) returns (CreateFilterResponse) {};
  rpc ExtendFilter(ExtendFilterRequest) returns (ExtendFilterResponse) {};
  rpc RemoveFilter(RemoveFilterRequest) returns (RemoveFilterResponse) {};
}
